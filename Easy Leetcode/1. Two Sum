1. Two Sum
Easy
51.6K
1.7K
Companies

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

 

Constraints:

    2 <= nums.length <= 104
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    Only one valid answer exists.



This was pretty easy when you think about the ways you can traverse and add the other element and then compare it to the target.
I need to learn dictionaries and enumerate to get these into optimal solution.
```
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for x in range(0,len(nums)-1):
            for i in range(1,len(nums)):
                if i == x:
                    continue
                sum = nums[x] + nums[i]
                if sum == target:
                    return [x,i]
```
