283. Move Zeroes
Easy
15.2K
382
Companies

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:

Input: nums = [0]
Output: [0]

 

Constraints:

    1 <= nums.length <= 104
    -231 <= nums[i] <= 231 - 1

 
Follow-up: Could you minimize the total number of operations done?

My first attempt:
I used 2 pointers to change the array's start and end according to the number of Zeroes. This failed if there were multiple concurrent 0's. Possibly n^n solution. n^2 best case.
```
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # for i in range(len(nums)):
        #     if nums[i] == 0:
        #         for l in range(len(nums)-1):
        #             nums[i]=nums[i+1]
        #             nums[i+1]=0
        n = len(nums)
        i = 0
        while(i<=n):
            if nums[i] == 0: 
                for x in range(i,n-1):
                    nums[x]=nums[x+1]
                    nums[x+1]=0
                n = n-1
            i=i+1

```


The second more optimal try:
I used some points from one of the solutions and tried to search and overwrite the number instead of trying to bubble the 0's to the end. 
I made them order them and then just changed everything to 0 after I traversed the array once. Possibly n logn solution. 
```
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        pos = 0 
        for i in range(0,(len(nums))):
            if nums[i] != 0:
                nums[pos]=nums[i]
                pos = pos + 1
        for i in range(pos,len(nums)):
            nums[i] = 0

```
